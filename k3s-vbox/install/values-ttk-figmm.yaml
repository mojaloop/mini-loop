COMPUTED VALUES:
connection-manager-backend:
  config:
    APP_OAUTH_CLIENT_KEY: ttk
    APP_OAUTH_CLIENT_SECRET: 23b898a5-63d2-4055-bbe1-54efcda37e7d
    AUTH_ENABLED: DISABLED
    DATABASE_HOST: $mysql_host
    DATABASE_PASSWORD: mcm
    DATABASE_PORT: $mysql_port
    DATABASE_SCHEMA: mcm
    DATABASE_USER: mcm
    EMBEDDED_CERTIFICATE: $auth_embedded_certificate
    EVERYONE_ROLE: Internal/everyone
    MTA_ROLE: Application/MTA
    OAUTH2_ISSUER: http://$auth_host:$auth_port$auth_issuer_path
    OAUTH2_TOKEN_ISS: http://$auth_host:$auth_port$auth_token_iss_path
    P12_PASS_PHRASE: SOME_S3C4R3_P@SS
    PORT: "5061"
    PTA_ROLE: Application/PTA
  dependencies:
    adminApiAuthentication:
      embeddedCertificate: password
      host: $release_name-ml-testing-toolkit-backend
      paths:
        issuer: /api/oauth2/token
        tokenIss: /api/oauth2/token
      port: "5050"
    keycloak:
      embeddedCertificate: '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDda1T6cyWogfG/xlUb3+gWZI0jsnlSGbf3PF89NCgS+n6HUJ0A2Ezmu/n9Gfkm8Rjyst914Vq9ebsueXHIc+Ad76+q3MASF1hRUTfnvH/v6rDguPvI6Jb/M9jGn5b2hglcg3B9Y7Tgv70bcV7oCweP68CPbIrTWjR9gyjmSHfYhwIDAQAB\n-----END
        PUBLIC KEY-----'
      enabled: false
      host: $release_name-keycloak-http
      paths:
        issuer: /auth/realms/testingtoolkit/protocol/openid-connect/token
        tokenIss: /auth/realms/testingtoolkit
      port: "7080"
    mysql:
      enabled: true
      host: $release_name-mysql
      port: "3306"
  enabled: false
  global: {}
  image:
    pullPolicy: Always
    repository: modusbox/connection-manager-api
    version: 1.6.5
  ingress:
    annotations: {}
    enabled: true
    hosts:
      connection-manager.local:
        paths:
        - /api/
        port: 5061
    tls: []
  replicaCount: 1
  service:
    ports:
      adminApi:
        externalPort: 5061
        internalPort: 3001
        name: admin-api
    type: ClusterIP
connection-manager-frontend:
  config:
    API_BASE_URL: http://connection-manager.local
    AUTH_ENABLED: "FALSE"
  enabled: false
  global: {}
  image:
    pullPolicy: Always
    repository: modusbox/connection-manager-ui
    version: 1.6.9
  ingress:
    annotations: {}
    enabled: true
    hosts:
      connection-manager.local:
        paths:
        - /
        port: 5060
    tls: []
  replicaCount: 1
  service:
    ports:
      webUi:
        externalPort: 5060
        internalPort: 8080
        name: web-ui
    type: ClusterIP
global: {}
keycloak:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "keycloak.selectorLabels" . | nindent 10 }}
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: NotIn
                values:
                  - test
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "keycloak.selectorLabels" . | nindent 12 }}
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: NotIn
                  values:
                    - test
            topologyKey: failure-domain.beta.kubernetes.io/zone
  args: []
  clusterDomain: cluster.local
  command: []
  enableServiceLinks: true
  enabled: false
  extraContainers: ""
  extraEnv: |
    - name: KEYCLOAK_USER
      value: admin
    - name: KEYCLOAK_PASSWORD
      value: admin
    - name: KEYCLOAK_IMPORT
      value: /realm/realm.json -Dkeycloak.profile.feature.upload_scripts=enabled
  extraEnvFrom: ""
  extraInitContainers: ""
  extraPorts: []
  extraServiceMonitor:
    annotations: {}
    enabled: false
    interval: 10s
    labels: {}
    namespace: ""
    namespaceSelector: {}
    path: /auth/realms/master/metrics
    port: http
    scrapeTimeout: 10s
  extraVolumeMounts: |
    - name: realm-secret
      mountPath: "/realm/"
      readOnly: true
  extraVolumes: |
    - name: realm-secret
      secret:
        secretName: realm-secret
  fullnameOverride: ""
  global: {}
  hostAliases: []
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/keycloak/keycloak
    tag: 11.0.2
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: true
    labels: {}
    rules:
    - host: testing-toolkit-keycloak.local
      paths:
      - /
    servicePort: http
    tls: []
  lifecycleHooks: ""
  livenessProbe: |
    httpGet:
      path: /auth/
      port: http
    initialDelaySeconds: 300
    timeoutSeconds: 5
  nameOverride: ""
  networkPolicy:
    enabled: false
    extraFrom: []
    labels: {}
  nodeSelector: {}
  pgchecker:
    image:
      pullPolicy: IfNotPresent
      repository: docker.io/busybox
      tag: 1.32
    resources:
      limits:
        cpu: 10m
        memory: 16Mi
      requests:
        cpu: 10m
        memory: 16Mi
    securityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
  podAnnotations: {}
  podDisruptionBudget: {}
  podLabels: {}
  podManagementPolicy: Parallel
  podSecurityContext:
    fsGroup: 1000
  postgresql:
    enabled: false
    networkPolicy:
      enabled: false
    postgresqlDatabase: keycloak
    postgresqlPassword: keycloak
    postgresqlUsername: keycloak
  priorityClassName: ""
  prometheusRule:
    annotations: {}
    enabled: false
    labels: {}
    rules: []
  rbac:
    create: false
    rules: []
  readinessProbe: |
    httpGet:
      path: /auth/realms/master
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1
  realmConfig:
    clientSecret: 23b898a5-63d2-4055-bbe1-54efcda37e7d
    embeddedCertificate: '-----BEGIN CERTIFICATE-----\nMIICrDCCAhWgAwIBAgIUBQ88qYAqQ1+I+ISsaIgYPqbya9QwDQYJKoZIhvcNAQEL\nBQAwaDELMAkGA1UEBhMCVUsxDzANBgNVBAgMBkxvbmRvbjEPMA0GA1UEBwwGTG9u\nZG9uMREwDwYDVQQKDAhNb2R1c2JveDERMA8GA1UECwwITW9kdXNib3gxETAPBgNV\nBAMMCE1vZHVzYm94MB4XDTIwMDkzMDE3MDYwNloXDTIxMDkzMDE3MDYwNlowaDEL\nMAkGA1UEBhMCVUsxDzANBgNVBAgMBkxvbmRvbjEPMA0GA1UEBwwGTG9uZG9uMREw\nDwYDVQQKDAhNb2R1c2JveDERMA8GA1UECwwITW9kdXNib3gxETAPBgNVBAMMCE1v\nZHVzYm94MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDda1T6cyWogfG/xlUb\n3+gWZI0jsnlSGbf3PF89NCgS+n6HUJ0A2Ezmu/n9Gfkm8Rjyst914Vq9ebsueXHI\nc+Ad76+q3MASF1hRUTfnvH/v6rDguPvI6Jb/M9jGn5b2hglcg3B9Y7Tgv70bcV7o\nCweP68CPbIrTWjR9gyjmSHfYhwIDAQABo1MwUTAdBgNVHQ4EFgQUEE+og3aDjUzC\nywQo45Fhjp5S9EowHwYDVR0jBBgwFoAUEE+og3aDjUzCywQo45Fhjp5S9EowDwYD\nVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQC2a7sxisCTQa9oRGMZRmJs\nFMZjia126qlRYm6ljjM2wWlqIBdxjzLhLJbAiWMyzGKTZdMOG51Ujc+NapKRLS4K\nHVnzcbtgRNq6GZk5C1L8BEzR6NxU/CdOkm2Vx811CTOT/YijpjtjF01K1aIZE+z8\nmdzyVY9ZybXqbNclLU7rwA==\n-----END
      CERTIFICATE-----'
    hubPassword: hub
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\nMIICWwIBAAKBgQDda1T6cyWogfG/xlUb3+gWZI0jsnlSGbf3PF89NCgS+n6HUJ0A\n2Ezmu/n9Gfkm8Rjyst914Vq9ebsueXHIc+Ad76+q3MASF1hRUTfnvH/v6rDguPvI\n6Jb/M9jGn5b2hglcg3B9Y7Tgv70bcV7oCweP68CPbIrTWjR9gyjmSHfYhwIDAQAB\nAoGAexcdAbIboEbE7xjB3aIm8rPpZovkOAkGJVKRm4OwN4S77FubPIoCjk631cWn\npcdoWBuqcGzcNfNDZL2szIPmdZU/Cx9I1wjFKRI1pKVS6E8giFLxKDg4KytLDUB2\nToU63yIGQ3lw2GL9Uj66AztAbcJcjsbWLPgtDiiEJlqFzVECQQDvr8pC1lChqgAQ\n8lWxh0LhuXBpGOpnnylWzloZ/kj9Xjh7ZNCRTRSGLDlANL040tzqOeJw3gvwLPtS\nKueUOCBZAkEA7H1B4dShqsXEKVMsy/7BqjT9EMUadYatJel47V5Hql9SO2Z0iK4f\nA22WWokXARb2bXk0awEw2lI6H2GgP3Oj3wJABM1PzxD+Io8GW1CPmPPtyhnt/50J\nLTRKHrwZoAWxLqpRlV9Ksm6J57pBF2E3HUlUNbkdKUe5k4FDM706UITjWQJAc4hp\n9Drd1EETqSCyROKrmEyUyWmRmJL36gqaglRJ7Kju0ogmLFPsYM9b4dURgP3H3AmX\nmyMUy8PaE1StZfJHvwJAA+SRSj+FFajdzrIlYFo7TirFWyQ/wdQ3+IKVGohOFQms\nYEi2xYZD4hWgztz4AbyHVFPLnS1mhwoO/uE2qbNHjw==\n-----END
      RSA PRIVATE KEY-----'
  replicas: 1
  resources: {}
  restartPolicy: Always
  route:
    annotations: {}
    enabled: false
    host: ""
    labels: {}
    path: /
    tls:
      enabled: true
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
  secrets: {}
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
  service:
    annotations: {}
    extraPorts: []
    httpManagementNodePort: null
    httpManagementPort: 9990
    httpNodePort: null
    httpPort: 7080
    httpsNodePort: null
    httpsPort: 8443
    labels: {}
    loadBalancerIP: ""
    rules:
    - host: testing-toolkit-keycloak.local
      paths:
      - /
    tls: []
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    imagePullSecrets: []
    labels: {}
    name: ""
  serviceMonitor:
    annotations: {}
    enabled: false
    interval: 10s
    labels: {}
    namespace: ""
    namespaceSelector: {}
    path: /metrics
    port: http-management
    scrapeTimeout: 10s
  startupScripts:
    keycloak.cli: |
      {{- .Files.Get "scripts/keycloak.cli" }}
  statefulsetAnnotations: {}
  statefulsetLabels: {}
  terminationGracePeriodSeconds: 60
  test:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      repository: docker.io/unguiculus/docker-python3-phantomjs-selenium
      tag: v1
    podSecurityContext:
      fsGroup: 1000
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
  tolerations: []
ml-testing-toolkit-backend:
  affinity: {}
  config:
    system_config.json:
      API_DEFINITIONS:
      - asynchronous: true
        folderPath: fspiop_1.0
        type: fspiop
        version: "1.0"
      - asynchronous: true
        folderPath: fspiop_1.1
        type: fspiop
        version: "1.1"
      - folderPath: settlements_1.0
        type: settlements
        version: "1.0"
      - folderPath: central_admin_9.3
        type: central_admin
        version: "9.3"
      - folderPath: als_admin_1.1
        type: als_admin
        version: "1.1"
      API_PORT: 5000
      CONFIG_VERSIONS:
        callback: 1
        forward: 1
        response: 1
        userSettings: 1
        validation: 1
      CONNECTION_MANAGER:
        API_URL: http://$connection_manager_host:$connection_manager_port
        AUTH_ENABLED: false
        HUB_PASSWORD: hub
        HUB_USERNAME: hub
      CONNECTION_MANAGER_AUTH_ENABLED: false
      DB:
        URI: mongodb://ttk:ttk@$mongodb_host:$mongodb_port/ttk
      HOSTING_ENABLED: false
      KEYCLOAK:
        API_URL: http://$auth_host:$auth_port
        ENABLED: false
        PASSWORD: hub
        REALM: testingtoolkit
        USERNAME: hub
      OAUTH:
        APP_OAUTH_CLIENT_KEY: ttk
        APP_OAUTH_CLIENT_SECRET: 23b898a5-63d2-4055-bbe1-54efcda37e7d
        AUTH_ENABLED: false
        EMBEDDED_CERTIFICATE: $auth_embedded_certificate
        EVERYONE_ROLE: Internal/everyone
        JWT_COOKIE_NAME: TTK-API_ACCESS_TOKEN
        MTA_ROLE: Application/MTA
        OAUTH2_ISSUER: http://$auth_host:$auth_port$auth_issuer_path
        OAUTH2_TOKEN_ISS: http://$auth_host:$auth_port$auth_token_iss_path
        P12_PASS_PHRASE: SOME_S3C4R3_P@SS
        PTA_ROLE: Application/PTA
    user_config.json:
      ADVANCED_FEATURES_ENABLED: true
      # Endpoint of FSPIOP API... I think
      CALLBACK_ENDPOINT: http://beta.moja-lab.live/api/fspiop
      CALLBACK_RESOURCE_ENDPOINTS:
        enabled: true
        endpoints:
        - endpoint: http://moja-account-lookup-service.demo
          method: put
          path: /parties/{Type}/{ID}
        - endpoint: http://moja-quoting-service.demo
          method: put
          path: /quotes/{ID}
        - endpoint: http://moja-ml-api-adapter-service.demo
          method: put
          path: /transfers/{ID}
      CALLBACK_TIMEOUT: 10000
      DEFAULT_USER_FSPID: userdfsp
      ENDPOINTS_DFSP_WISE:
        dfsps:
          userdfsp:
            defaultEndpoint: http://mojaloop-sim-figmm-scheme-adapter:4000
            endpoints: []
          userdfsp2:
            defaultEndpoint: http://scheme-adapter2:4000
            endpoints: []
      FSPID: figmm
      HUB_ONLY_MODE: false
      ILP_SECRET: secret
      INBOUND_MUTUAL_TLS_ENABLED: false
      JWS_SIGN: false
      JWS_SIGN_PUT_PARTIES: false
      OUTBOUND_MUTUAL_TLS_ENABLED: false
      SEND_CALLBACK_ENABLE: true
      TRANSFERS_VALIDATION_CONDITION: true
      TRANSFERS_VALIDATION_ILP_PACKET: true
      TRANSFERS_VALIDATION_WITH_PREVIOUS_QUOTES: true
      VALIDATE_INBOUND_JWS: false
      VALIDATE_INBOUND_PUT_PARTIES_JWS: false
      VERSION: 1
      VERSIONING_SUPPORT_ENABLE: true
  dependencies:
    adminApiAuthentication:
      embeddedCertificate: password
      host: localhost
      paths:
        issuer: /api/oauth2/token
        tokenIss: /api/oauth2/token
      port: "5050"
    connectionManagerBackend:
      enabled: false
      host: $release_name-connection-manager-backend
      port: "5061"
    keycloak:
      embeddedCertificate: '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDda1T6cyWogfG/xlUb3+gWZI0jsnlSGbf3PF89NCgS+n6HUJ0A2Ezmu/n9Gfkm8Rjyst914Vq9ebsueXHIc+Ad76+q3MASF1hRUTfnvH/v6rDguPvI6Jb/M9jGn5b2hglcg3B9Y7Tgv70bcV7oCweP68CPbIrTWjR9gyjmSHfYhwIDAQAB\n-----END
        PUBLIC KEY-----'
      enabled: false
      host: $release_name-keycloak-http
      paths:
        issuer: /auth/realms/testingtoolkit/protocol/openid-connect/token
        tokenIss: /auth/realms/testingtoolkit
      port: "7080"
    mongodb:
      enabled: false
      host: $release_name-ttk-mongodb
      port: "27017"
  enabled: true
  extraEnvironments: {}
  global: {}
  image:
    command: '["sh", "-c", "cd /opt/mojaloop-testing-toolkit; if [ -f /opt/default_config/user_config.json
      ]; then cp /opt/default_config/user_config.json spec_files; fi; if [ -f /opt/default_config/system_config.json
      ]; then cp /opt/default_config/system_config.json spec_files; fi; npm run start;"]'
    commandPersistence: '["sh", "-c", "cd /opt/mojaloop-testing-toolkit; if [ -d /opt/ttk-data
      ]; then if [ ! -d /opt/ttk-data/spec_files ]; then if [ -f /opt/default_config/user_config.json
      ]; then cp /opt/default_config/user_config.json spec_files; fi; if [ -f /opt/default_config/system_config.json
      ]; then cp /opt/default_config/system_config.json spec_files; fi; cp -pR spec_files
      /opt/ttk-data/spec_files; fi; mv spec_files spec_files_default; ln -s /opt/ttk-data/spec_files
      spec_files; else if [ -f /opt/default_config/user_config.json ]; then cp /opt/default_config/user_config.json
      spec_files; fi; if [ -f /opt/default_config/system_config.json ]; then cp /opt/default_config/system_config.json
      spec_files; fi; fi; npm run start;"]'
    pullPolicy: Always
    repository: mojaloop/ml-testing-toolkit
    tag: v11.5.0
  ingress:
    annotations: {}
    enabled: false
    hosts:
      testing-toolkit-specapi.local:
        paths:
        - /
        port: 5000
      testing-toolkit.local:
        paths:
        - /api/
        - /socket.io/
        port: 5050
    tls: []
  livenessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 90
    periodSeconds: 15
  nodeSelector: {}
  persistence:
    accessMode: ReadWriteOnce
    enabled: false
    size: 1Gi
  readinessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 120
    periodSeconds: 15
  replicaCount: 1
  resources: {}
  service:
    ports:
      adminApi:
        externalPort: 5050
        internalPort: 5050
        name: admin-api
      specApi:
        externalPort: 5000
        internalPort: 5000
        name: spec-api
    type: ClusterIP
  tolerations: []
ml-testing-toolkit-frontend:
  affinity: {}
  config:
    API_BASE_URL: http://figmm-ttk.beta.moja-lab.live
    AUTH_ENABLED: "FALSE"
  enabled: true
  global: {}
  image:
    command: '["sh", "/usr/share/nginx/start.sh"]'
    pullPolicy: Always
    repository: mojaloop/ml-testing-toolkit-ui
    tag: v11.5.0
  ingress:
    annotations: {}
    enabled: false
    hosts:
      testing-toolkit.local:
        paths:
        - /
        port: 6060
    tls: []
  livenessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 90
    periodSeconds: 15
  nodeSelector: {}
  readinessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 120
    periodSeconds: 15
  replicaCount: 1
  resources: {}
  service:
    ports:
      webUi:
        externalPort: 6060
        internalPort: 6060
        name: web-ui
    type: ClusterIP
  tolerations: []
mongodb:
  affinity: {}
  affinityArbiter: {}
  annotations: {}
  clusterDomain: cluster.local
  configmap: null
  enabled: false
  extraVolumeMounts: []
  extraVolumeMountsArbiter: []
  extraVolumes: []
  extraVolumesArbiter: []
  global: {}
  image:
    debug: false
    pullPolicy: Always
    registry: docker.io
    repository: bitnami/mongodb
    tag: latest
  ingress:
    annotations: null
    certManager: false
    enabled: false
    hosts:
    - name: mongodb.local
      path: /
    secrets: null
    tls:
    - hosts:
      - mongodb.local
      secretName: mongodb.local-tls
  initConfigMap: {}
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    enabled: false
    extraArgs: ""
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/mongodb-exporter
      tag: 0.10.0-debian-10-r42
    livenessProbe:
      enabled: false
      failureThreshold: 3
      initialDelaySeconds: 15
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    podAnnotations:
      prometheus.io/port: "9216"
      prometheus.io/scrape: "true"
    readinessProbe:
      enabled: false
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    serviceMonitor:
      additionalLabels: {}
      alerting:
        additionalLabels: {}
        rules: {}
      enabled: false
  mongodbDatabase: ttk
  mongodbDirectoryPerDB: false
  mongodbDisableSystemLog: false
  mongodbEnableIPv6: true
  mongodbExtraFlags: []
  mongodbPassword: ttk
  mongodbRootPassword: adminpass
  mongodbSystemLogVerbosity: 0
  mongodbUsername: ttk
  nameOverride: ttk-mongodb
  nodeSelector: {}
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    mountPath: /bitnami/mongodb
    size: 8Gi
    subPath: ""
  podAnnotations: {}
  podLabels: {}
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaSet:
    enabled: false
    name: rs0
    pdb:
      enabled: true
      minAvailable:
        arbiter: 1
        primary: 1
        secondary: 1
    replicas:
      arbiter: 1
      secondary: 1
    useHostnames: true
  resources: {}
  resourcesArbiter: {}
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    port: 27017
    type: ClusterIP
  sidecars: []
  sidecarsArbiter: []
  tolerations: []
  updateStrategy:
    type: RollingUpdate
  usePassword: true
  useStatefulSet: false
  volumePermissions:
    enabled: false
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/minideb
      tag: buster
    resources: {}
mysql:
  allowRootFrom: '%'
  configFiles:
    node.cnf: |+
      [mysqld]
      datadir=/var/lib/mysql
      default_storage_engine=InnoDB
      binlog_format=ROW
      innodb_flush_log_at_trx_commit  = 1
      innodb_flush_method             = O_DIRECT
      innodb_file_per_table           = 1
      innodb_autoinc_lock_mode=2
      bind_address = 0.0.0.0
      wsrep_slave_threads=2
      wsrep_cluster_address=gcomm://
      wsrep_provider=/usr/lib/galera3/libgalera_smm.so
      wsrep_cluster_name=galera
      wsrep_sst_method=xtrabackup-v2
      pxc_strict_mode=DISABLED
      max_connections=999
      max_user_connections=994
      thread_cache_size=999

  enabled: false
  global: {}
  image:
    pullPolicy: Always
    repository: percona/percona-xtradb-cluster
    tag: 5.7.19
  logTail: true
  metricsExporter:
    argsOverrides: []
    commandOverrides: []
    enabled: false
  mysqlDatabase: mcm
  mysqlPassword: mcm
  mysqlUser: mcm
  nameOverride: mysql
  nodeSelector: {}
  persistence:
    accessMode: ReadWriteOnce
    enabled: false
    size: 8Gi
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  prometheus:
    operator:
      enabled: false
      prometheusRule:
        enabled: true
        labels: {}
      serviceMonitor:
        interval: 10s
  replicas: 1
  service:
    externalIPs: []
    percona:
      headless: false
    port: 3306
    type: ClusterIP
  ssl:
    certificates: null
    enabled: false
    secret: mysql-ssl-certs
  tolerations: []
